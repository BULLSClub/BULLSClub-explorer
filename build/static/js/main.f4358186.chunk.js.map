{"version":3,"sources":["ErrorMessage.js","SwitchNetwork.js","App.js","reportWebVitals.js","nft.js","nftbear.js","nftyellow.js","nftpolar.js","nftbull.js","nftnfrt.js","index.js"],"names":["ErrorMessage","message","className","xmlns","fill","viewBox","d","networks","polygon","chainId","Number","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","bsc","ethereum","changeNetwork","networkName","setError","window","Error","request","method","params","SwitchNetwork","useState","error","handleNetworkSwitch","networkChanged","console","log","useEffect","on","removeListener","onClick","account","vaultcontract","web3","NFTCONTRACT","createAlchemyWeb3","STAKINGCONTRACT","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","walletlink","WalletLink","appName","rpc","appLogoUrl","darkMode","web3Modal","Web3Modal","network","theme","cacheProvider","App","state","balance","nftdata","rawearn","this","setState","show","nftamount","outvalue","target","value","axios","get","then","outputa","data","config","headers","outputb","result","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","toFixed","document","getElementById","textContent","Promise","resolve","setTimeout","connect","provider","Web3","send","eth","getAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","arraynft","Array","from","map","tokenid","filter","forEach","id","earningInfo","array","earned","String","split","earnedrwd","utils","fromWei","rewardx","numrwd","push","class","style","fontFamily","href","src","alt","width","fontSize","type","borderRadius","color","fontWeight","Alt","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","moralisapi","moralisapikey","nftpng","binancechainwallet","NFT","apicall","getNfts","nftstk","getStk","loadingState","setLoadingState","open","setOpen","tokenID","setTokenID","address","setAddress","callApi","sendNFT","NFTcont","NFTABI","transferFrom","transactionParameters","to","selectedAddress","maxPriorityFeePerGas","toHex","toWei","maxFeePerGas","gas","ethers","BigNumber","toHexString","encodeABI","txHash","success","status","output","nfts","all","i","tokenId","token_id","holder","owner_of","wallet","stakednfts","stkid","length","display","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","stake","textShadow","Button","marginLeft","backgroundColor","transfer","unstake","position","top","Dialog","onClose","onChange","ev","NFT1","NFT2","NFT3","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f4358186.chunk.js","sourcesContent":["export default function ErrorMessage({ message }) {\r\n    if (!message) return null;\r\n  \r\n    return (\r\n      <div className=\"alert alert-error mt-5\">\r\n        <div className=\"flex-1\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            className=\"w-6 h-6 mx-2 stroke-current\"\r\n          >\r\n            <path\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              stroke-width=\"2\"\r\n              d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"\r\n            ></path>\r\n          </svg>\r\n          <label>{message}</label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  ","import { useState, useEffect } from \"react\";\nimport ErrorMessage from \"./ErrorMessage\";\n\nconst networks = {\n  polygon: {\n    chainId: `0x${Number(137).toString(16)}`,\n    chainName: \"Polygon Mainnet\",\n    nativeCurrency: {\n      name: \"MATIC\",\n      symbol: \"MATIC\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://polygon-rpc.com/\"],\n    blockExplorerUrls: [\"https://polygonscan.com/\"]\n  },\n  bsc: {\n    chainId: `0x${Number(56).toString(16)}`,\n    chainName: \"Binance Smart Chain Mainnet\",\n    nativeCurrency: {\n      name: \"Binance Chain Native Token\",\n      symbol: \"BNB\",\n      decimals: 18\n    },\n    rpcUrls: [\n      \"https://bsc-dataseed1.binance.org\",\n      \"https://bsc-dataseed2.binance.org\",\n      \"https://bsc-dataseed3.binance.org\",\n      \"https://bsc-dataseed4.binance.org\",\n      \"https://bsc-dataseed1.defibit.io\",\n      \"https://bsc-dataseed2.defibit.io\",\n      \"https://bsc-dataseed3.defibit.io\",\n      \"https://bsc-dataseed4.defibit.io\",\n      \"https://bsc-dataseed1.ninicoin.io\",\n      \"https://bsc-dataseed2.ninicoin.io\",\n      \"https://bsc-dataseed3.ninicoin.io\",\n      \"https://bsc-dataseed4.ninicoin.io\",\n      \"wss://bsc-ws-node.nariox.org\"\n    ],\n    blockExplorerUrls: [\"https://bscscan.com\"]\n  },\n\n\n  ethereum: {\n    chainId: `0x${Number(1).toString(16)}`,\n    chainName: \"Ethereum Mainnet\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://api.securerpc.com/v1\",\n\"https://eth-rpc.gateway.pokt.network\",\n\"https://rpc.ankr.com/eth\",\n\"https://rpc.flashbots.net\",\n\"https://eth-mainnet-public.unifra.io\",\n\"https://api.securerpc.com/v1\"\n  ],\n    blockExplorerUrls: [\"https://etherscan.io/\"]\n  },\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst changeNetwork = async ({ networkName, setError }) => {\n  try {\n    if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          ...networks[networkName]\n        }\n      ]\n    });\n  } catch (err) {\n    setError(err.message);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default function SwitchNetwork() {\n  const [error, setError] = useState();\n\n  const handleNetworkSwitch = async (networkName) => {\n    setError();\n    await changeNetwork({ networkName, setError });\n  };\n\n  const networkChanged = (chainId) => {\n    console.log({ chainId });\n  };\n\n  useEffect(() => {\n    window.ethereum.on(\"chainChanged\", networkChanged);\n\n    return () => {\n      window.ethereum.removeListener(\"chainChanged\", networkChanged);\n    };\n  }, []);\n\n  return (\n    <div className=\"credit-card w-full lg:w-1/2 sm:w-auto  mx-auto rounded-xl bg-transparent\">\n      \n        \n        <div className=\"mt-4\">\n          <button\n            onClick={() => handleNetworkSwitch(\"polygon\")}\n            className=\"mt-2 mb-2 btn btn-primary submit-button focus:ring focus:outline-none w-full\"\n          >\n            Switch to Polygon\n          </button>\n          <button\n            onClick={() => handleNetworkSwitch(\"bsc\")}\n            className=\"mt-2 mb-2 bg-warning border-warning btn submit-button focus:ring focus:outline-none w-full\"\n          >\n            Switch to BSC\n          </button>\n          <button\n            onClick={() => handleNetworkSwitch(\"ethereum\")}\n            className=\"mt-2 mb-2 btn btn-primary submit-button focus:ring focus:outline-none w-full\"\n          >\n            Switch to Ethereum\n          </button>\n          <ErrorMessage message={error} />\n        </div>\n      \n    </div>\n  );\n}\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport Web3 from 'web3';\nimport ABI from './ABI.json';\nimport axios from 'axios';\nimport VAULTABI from './VAULTABI.json';\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\nimport SwitchNetwork from './SwitchNetwork';\n\n\n\n\n\n\nvar account = null;\nvar /*eslint-disable */ contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\n\n\nconst Web3Alc = createAlchemyWeb3(\"https://polygon-mainnet.g.alchemy.com/v2/ZCkryZH8G20HgpvPtGDxZk1r1mM_KAx3\");\nconst NFTCONTRACT = \"0xFc6D74b6c444b00f39544152553b306C24542d94\";\nconst STAKINGCONTRACT = \"0x238d94ed5780f5F058a2f6CfaF3aD975887a7308\";\nconst polygonscanapikey = \"TWRGVKG991VTZ6E5T8JAAKPMMQ7GYY1TKS\";\nconst polygonscanapi = \"https://api.polygonscan.com/api\"\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\n\n\n\n\n\n\n\n\n\n\nconst providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\n      }\n    },\n\n    walletlink: {\n      package: WalletLink, \n      options: {\n        appName: \"Yellow-Cows-VAULT\", \n        infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\n        rpc: \"\", \n        chainId: 137, \n        appLogoUrl: null, \n        darkMode: true \n      }\n      },\n\n  };\n\n\n\n\n  const web3Modal = new Web3Modal({\n    network: \"polygon\",\n    theme: \"dark\",\n    cacheProvider: true,\n    providerOptions \n    });\n\n\n\n\n\n\n\n\n\n\n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          balance: [],\n          nftdata: [],\n          rawearn: [],\n        };\n      }\n      \n      handleModal(){  \n        this.setState({show:!this.state.show})  \n      } \n    \n      handleNFT(nftamount) {\n        this.setState({outvalue:nftamount.target.value});\n        }\n    \n      async componentDidMount() {\n        \n        await axios.get((polygonscanapi + `?module=stats&action=tokensupply&contractaddress=${NFTCONTRACT}&apikey=${polygonscanapikey}`))\n        .then(outputa => {\n                this.setState({\n                    balance:outputa.data\n                })\n                console.log(outputa.data)\n            })\n        let config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\n        await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\n        .then(outputb => {\n          const { result } = outputb.data\n                this.setState({\n                    nftdata:result\n                })\n                console.log(outputb.data)\n            })\n      }\n    \n    \n    render() {\n      const {balance} = this.state;\n      const {outvalue} = this.state;\n      \n\n\n      async function connectwallet() {\n        var provider = await web3Modal.connect();\n        web3 = new Web3(provider);\n        await provider.send('eth_requestAccounts');\n        var accounts = await web3.eth.getAccounts();\n        account = accounts[0];\n        document.getElementById('wallet-address').textContent = account;\n        contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n        vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n        var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n        document.getElementById('yournfts').textContent = getstakednfts;\n        var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n        document.getElementById('stakedbalance').textContent = getbalance;\n        const arraynft = Array.from(getstakednfts.map(Number));\n        const tokenid = arraynft.filter(Number);\n        var rwdArray = [];\n        tokenid.forEach(async (id) => {\n          var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n          var array = Array.from(rawearn.map(Number));\n          console.log(array);\n          array.forEach(async (item) => {\n            var earned = String(item).split(\",\")[0];\n            var earnedrwd = Web3.utils.fromWei(earned);\n            var rewardx = Number(earnedrwd).toFixed(2);\n            var numrwd = Number(rewardx);\n            console.log(numrwd);\n            rwdArray.push(numrwd);\n          });\n        });\n        function delay() {\n          return new Promise(resolve => setTimeout(resolve, 300));\n        }\n        async function delayedLog(item) {\n          await delay();\n          var sum = item.reduce((a, b) => a + b, 0);\n          var formatsum = Number(sum).toFixed(2);\n          document.getElementById('earned').textContent = formatsum;\n        }\n        async function processArray(rwdArray) {\n          for (const item of rwdArray) {\n            await delayedLog(item);\n          }\n        }\n        return processArray([rwdArray]);\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const refreshPage = ()=>{\n    window.location.reload();  \n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <body>\n      <nav class=\"navbar navbarfont navbarglow navbar-expand-md navbar-light bg-light mb-3\">\n            <div class=\"container-fluid\" style={{ fontFamily: \"SF Pro Display\" }}>\n              <a class=\"navbar-link active\" aria-current=\"page\" href=\"./\"><img src=\"Bullsc.png\" alt=\"Bullsc.png\"     width=\"18%\"  /></a> \n              </div>\n\n              <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <ul class=\"navbar-nav me-auto mb-3 px-4 mb-md-0\" style={{ fontSize: \"20px\" }}>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"page\" href=\"https://cryptobullsclub.space/\">Home</a>\n                  </li> \n                </ul>\n        \n                <ul class=\"navbar-nav me-auto mb-2 px-3 mb-md-0\" style={{ fontSize: \"20px\" }}>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"page\" href=\"https://cryptobullsclub.space/bullsclub-polygon-bnb-nft-utility-vault/\">Vault</a>\n                  </li>  \n                </ul>\n              \n                <ul class=\"navbar-nav me-auto mb-3 px-4 mb-md-1\" style={{ fontSize: \"20px\" }}>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"page\" href=\"https://cryptobullsclub.space/crypto-blog/\">Blog</a>\n                  </li> \n                </ul>\n                <ul class=\"navbar-nav me-auto mb-2 px-3 mb-md-0\" style={{ fontSize: \"20px\" }}>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"page\" href=\"https://bullsclub-DEX.cryptobullsclub.space/\">DEX</a>\n                  </li>  \n                </ul>\n                <ul class=\"navbar-nav me-auto mb-2 px-3 mb-md-0\" style={{ fontSize: \"20px\" }}>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"page\" href=\"https://bullsclub-explorer.cryptobullsclub.space/\">Explorer</a>\n                  </li>  \n                </ul>\n            </div>\n            <div class=\"container-fluid\" style={{ fontFamily: \"SF Pro Display\" }}>\n              <a class=\"navbar-link active\" aria-current=\"page\" href=\"https://marketplace.cryptobullsclub.space\"><img src=\"5005935.png\" alt=\"Marketplace\"     width=\"8%\"  /></a>\n              </div>\n\n            <div className='px-5'>\n              <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\"  onClick={connectwallet} style={{ fontFamily: \"SF Pro Display\" }}  value=\"Connect Wallet\" />\n              \n            </div>\n          </nav>\n         \n          <div className=\"pb-6\" id='wallet-address'></div>\n\n\n\n\n\n         \n\n              \n          <h4 className=\"pt-2\"  style={{ fontSize: '35px', borderRadius: '14px', color: \"#f7f7f7\", fontWeight: \"700\" }}>BULLSClub-Explorer</h4>\n          <div className='col mt-4 ml-3'>\n        <img src=\"space.png\" Alt=\"space\" width=\"10%\" />\n      </div>\n     \n      <SwitchNetwork></SwitchNetwork>\n\n\n\n\n\n\n\n\n\n\n\n          <div className='container container-style'>           \n              <body className='nftminter'>\n              <h2 className=\"pt-2\" style={{ fontWeight: \"500\", fontSize: \"18px\" }}>BULLSClub Owned NFTs</h2>\n            </body>\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          \n        </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      </body>\n    </div>\n  );\n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport NFTABI from './ABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /*eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\n\r\nconst NFTCONTRACT = \"0xFc6D74b6c444b00f39544152553b306C24542d94\";\r\nconst STAKINGCONTRACT = \"0x238d94ed5780f5F058a2f6CfaF3aD975887a7308\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/QmPeUUVv6VYtXcJiaffkD9S8V7xDmwzWaqJHwdEi4jUVuy/\";\r\n\r\n\r\n\r\nconst providerOptions = {\r\n    binancechainwallet: {\r\n      package: true\r\n      },\r\n  \r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n        }\r\n      },\r\n  \r\n      walletlink: {\r\n        package: WalletLink, \r\n        options: {\r\n          appName: \"COWs-VAULT\", \r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n          rpc: \"\", \r\n          chainId: 137, \r\n          appLogoUrl: null, \r\n          darkMode: true \r\n        }\r\n        },\r\n  \r\n    };\r\n  \r\n    const web3Modal = new Web3Modal({\r\n      network: \"polygon\",\r\n      theme: \"dark\",\r\n      cacheProvider: true,\r\n      providerOptions \r\n      });\r\n  \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function NFT() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded');\r\n  const [open,setOpen] = useState(false);\r\n  const [tokenID,setTokenID] = useState(0);\r\n  const [address,setAddress] = useState(\"\");\r\nconst handleClose = (value) => {\r\n  setOpen(false);\r\n\r\n};\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n  const transfer = (tokenID) => {\r\n\r\n    setTokenID(tokenID);\r\n    setOpen(true);\r\n  }\r\n  const sendNFT = async() => {\r\n\r\n    console.log(tokenID);\r\n    console.log(address);\r\n    var provider = await web3Modal.connect(window.ethereum);\r\n    web3 = new Web3(provider);\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    console.log(accounts);\r\n    const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n    let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n    const transactionParameters = {\r\n      to: NFTCONTRACT, // Required except during contract publications.\r\n      from: window.ethereum.selectedAddress, // must match user's active address.\r\n  //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n  //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n      maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n      maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n      gas: ethers.BigNumber.from(300000).toHexString(),\r\n      'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n  //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n  };\r\n  //sign transaction via Metamask\r\n  try {\r\n      const txHash = await window.ethereum.request({\r\n              method: 'eth_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n      // console.log(txHash);\r\n      return {\r\n          success: true,\r\n          status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n      }\r\n  } catch (error) {\r\n      return {\r\n          success: false,\r\n          status: \"😥 Something went wrong: \" + error.message\r\n      }\r\n  }\r\n  }\r\n  \r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n        <div className='nftportal mb-4'>\r\n            <div className=\"container col-lg-11\">\r\n              <div className=\"row items px-3 pt-3\">\r\n                <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                  {apicall.map((nft, i) => {\r\n                    var owner = nft.wallet.toLowerCase();\r\n                      if (owner.indexOf(nft.holder) !== -1) {\r\n                    async function stakeit() {\r\n                      vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                    }\r\n                    return (\r\n                      <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                        <div className=\"image-over\">\r\n                          <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"card-caption col-12 p-0\">\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"mb-0\">COWs NFT #{nft.tokenId}</h5>\r\n                            <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                            <div className=\"card-bottom d-flex justify-content-between\">\r\n                              <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Transfer</Button>\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}})}\r\n                    {nftstk.map((nft, i) => {\r\n                      async function unstakeit() {\r\n                        vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                      }\r\n                      return (\r\n                        <div>\r\n                        \r\n                        <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                          <div className=\"image-over\">\r\n                          <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                          </div>\r\n                          <div className=\"card-caption col-12 p-0\">\r\n                            <div className=\"card-body\">\r\n                              <h5 className=\"mb-0\">COW NFT #{nft.tokenId}</h5>\r\n                              <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                              <div className=\"card-bottom d-flex justify-content-between\">\r\n                                <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      )})}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Dialog onClose={handleClose} open={open}>\r\n            <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n            <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>confirm</Button>\r\n      \r\n    </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n    ","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport NFTABI from './ABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /* eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\n\r\nconst NFTCONTRACT = \"0x4C52548145a99EAcDe86561ef30Cd01c103cB579\";\r\nconst STAKINGCONTRACT = \"0x5ae1A4E0149C37DbC7dB049776AfAee9CdeA5Fae\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/QmUNU6CcbxKapSL24HGQSgct3Fjb4XdPw3dANDPz131xbx/\";\r\n\r\n\r\n\r\n\r\n\r\nconst providerOptions = {\r\n    binancechainwallet: {\r\n      package: true\r\n      },\r\n  \r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n        }\r\n      },\r\n  \r\n      walletlink: {\r\n        package: WalletLink, \r\n        options: {\r\n          appName: \"Bears-VAULT\", \r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n          rpc: \"\", \r\n          chainId: 137, \r\n          appLogoUrl: null, \r\n          darkMode: true \r\n        }\r\n        },\r\n  \r\n    };\r\n  \r\n    const web3Modal = new Web3Modal({\r\n      network: \"polygon\",\r\n      theme: \"dark\",\r\n      cacheProvider: true,\r\n      providerOptions \r\n      });\r\n  \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function NFT1() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded');\r\n  const [open,setOpen] = useState(false);\r\n  const [tokenID,setTokenID] = useState(0);\r\n  const [address,setAddress] = useState(\"\");\r\nconst handleClose = (value) => {\r\n  setOpen(false);\r\n\r\n};\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n  const transfer = (tokenID) => {\r\n\r\n    setTokenID(tokenID);\r\n    setOpen(true);\r\n  }\r\n  const sendNFT = async() => {\r\n\r\n    console.log(tokenID);\r\n    console.log(address);\r\n    var provider = await web3Modal.connect(window.ethereum);\r\n    web3 = new Web3(provider);\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    console.log(accounts);\r\n    const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n    let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n    const transactionParameters = {\r\n      to: NFTCONTRACT, // Required except during contract publications.\r\n      from: window.ethereum.selectedAddress, // must match user's active address.\r\n  //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n  //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n      maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n      maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n      gas: ethers.BigNumber.from(300000).toHexString(),\r\n      'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n  //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n  };\r\n  //sign transaction via Metamask\r\n  try {\r\n      const txHash = await window.ethereum.request({\r\n              method: 'eth_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n      // console.log(txHash);\r\n      return {\r\n          success: true,\r\n          status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n      }\r\n  } catch (error) {\r\n      return {\r\n          success: false,\r\n          status: \"😥 Something went wrong: \" + error.message\r\n      }\r\n  }\r\n  }\r\n  \r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n        <div className='nftportal mb-4'>\r\n            <div className=\"container col-lg-11\">\r\n              <div className=\"row items px-3 pt-3\">\r\n                <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                  {apicall.map((nft, i) => {\r\n                    var owner = nft.wallet.toLowerCase();\r\n                      if (owner.indexOf(nft.holder) !== -1) {\r\n                    async function stakeit() {\r\n                      vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                    }\r\n                    return (\r\n                      <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                        <div className=\"image-over\">\r\n                          <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"card-caption col-12 p-0\">\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"mb-0\">GRIZZLY-BEARs NFT #{nft.tokenId}</h5>\r\n                            <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                            <div className=\"card-bottom d-flex justify-content-between\">\r\n                              <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Send</Button>\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}})}\r\n                    {nftstk.map((nft, i) => {\r\n                      async function unstakeit() {\r\n                        vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                      }\r\n                      return (\r\n                        <div>\r\n                        \r\n                        <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                          <div className=\"image-over\">\r\n                          <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                          </div>\r\n                          <div className=\"card-caption col-12 p-0\">\r\n                            <div className=\"card-body\">\r\n                              <h5 className=\"mb-0\">GRIZZLY-BEARs NFT #{nft.tokenId}</h5>\r\n                              <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                              <div className=\"card-bottom d-flex justify-content-between\">\r\n                                <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      )})}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Dialog onClose={handleClose} open={open}>\r\n            <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n            <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>Transfer</Button>\r\n      \r\n    </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n    ","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport NFTABI from './ABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /* eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\nconst NFTCONTRACT = \"0x899310114B573E768747ea866c0edC51F39C15Cb\";\r\nconst STAKINGCONTRACT = \"0xC33176cFa7095C1027CD0c1bF3322449639F59cD\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/QmaEhHLdXoTNG6vzZGuhcugpp2LCcTu2tbXaeA6fnPcWGV/\";\r\n\r\n\r\n\r\n\r\nconst providerOptions = {\r\n    binancechainwallet: {\r\n      package: true\r\n      },\r\n  \r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n        }\r\n      },\r\n  \r\n      walletlink: {\r\n        package: WalletLink, \r\n        options: {\r\n          appName: \"BULLSC-TIER1-VAULT\", \r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n          rpc: \"\", \r\n          chainId: 137, \r\n          appLogoUrl: null, \r\n          darkMode: true \r\n        }\r\n        },\r\n  \r\n    };\r\n  \r\n    const web3Modal = new Web3Modal({\r\n      network: \"polygon\",\r\n      theme: \"dark\",\r\n      cacheProvider: true,\r\n      providerOptions \r\n      });\r\n  \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function NFT2() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded');\r\n  const [open,setOpen] = useState(false);\r\n  const [tokenID,setTokenID] = useState(0);\r\n  const [address,setAddress] = useState(\"\");\r\nconst handleClose = (value) => {\r\n  setOpen(false);\r\n\r\n};\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n  const transfer = (tokenID) => {\r\n\r\n    setTokenID(tokenID);\r\n    setOpen(true);\r\n  }\r\n  const sendNFT = async() => {\r\n\r\n    console.log(tokenID);\r\n    console.log(address);\r\n    var provider = await web3Modal.connect(window.ethereum);\r\n    web3 = new Web3(provider);\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    console.log(accounts);\r\n    const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n    let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n    const transactionParameters = {\r\n      to: NFTCONTRACT, // Required except during contract publications.\r\n      from: window.ethereum.selectedAddress, // must match user's active address.\r\n  //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n  //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n      maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n      maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n      gas: ethers.BigNumber.from(300000).toHexString(),\r\n      'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n  //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n  };\r\n  //sign transaction via Metamask\r\n  try {\r\n      const txHash = await window.ethereum.request({\r\n              method: 'eth_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n      // console.log(txHash);\r\n      return {\r\n          success: true,\r\n          status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n      }\r\n  } catch (error) {\r\n      return {\r\n          success: false,\r\n          status: \"😥 Something went wrong: \" + error.message\r\n      }\r\n  }\r\n  }\r\n\r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n            <div className='nftportal mb-4'>\r\n                <div className=\"container col-lg-11\">\r\n                  <div className=\"row items px-3 pt-3\">\r\n                    <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                      {apicall.map((nft, i) => {\r\n                        var owner = nft.wallet.toLowerCase();\r\n                          if (owner.indexOf(nft.holder) !== -1) {\r\n                        async function stakeit() {\r\n                          vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                        }\r\n                        return (\r\n                          <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                            <div className=\"image-over\">\r\n                              <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"card-caption col-12 p-0\">\r\n                              <div className=\"card-body\">\r\n                                <h5 className=\"mb-0\">YELLOW-COW NFT #{nft.tokenId}</h5>\r\n                                <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                                <div className=\"card-bottom d-flex justify-content-between\">\r\n                                  <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Send</Button>\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        )}})}\r\n                        {nftstk.map((nft, i) => {\r\n                          async function unstakeit() {\r\n                            vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                          }\r\n                          return (\r\n                            <div>\r\n                            \r\n                            <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                              <div className=\"image-over\">\r\n                              <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                                <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                              </div>\r\n                              <div className=\"card-caption col-12 p-0\">\r\n                                <div className=\"card-body\">\r\n                                  <h5 className=\"mb-0\">YELLOW-COW NFT #{nft.tokenId}</h5>\r\n                                  <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                                  <div className=\"card-bottom d-flex justify-content-between\">\r\n                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                    <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            </div>\r\n                          )})}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Dialog onClose={handleClose} open={open}>\r\n                <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>Transfer</Button>\r\n          \r\n        </Dialog>\r\n                </div>\r\n            )\r\n        }\r\n        ","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport NFTABI from './ABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /* eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\n\r\nconst NFTCONTRACT = \"0xd2921CF90fEE0cC6Ef9961cBf60C8Cb6F07166eD\";\r\nconst STAKINGCONTRACT = \"0xc878b36A2578ebD0938E4b4E5Ed5782E48fE5eEc\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/QmXx6u8AxX7xVKYkyHxSAyWazeju1gUC3Awrp4s8j5wpy7/\";\r\n\r\n\r\n\r\n\r\nconst providerOptions = {\r\n    binancechainwallet: {\r\n      package: true\r\n      },\r\n  \r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n        }\r\n      },\r\n  \r\n      walletlink: {\r\n        package: WalletLink, \r\n        options: {\r\n          appName: \"BULLSC-TIER1-VAULT\", \r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n          rpc: \"\", \r\n          chainId: 137, \r\n          appLogoUrl: null, \r\n          darkMode: true \r\n        }\r\n        },\r\n  \r\n    };\r\n  \r\n    const web3Modal = new Web3Modal({\r\n      network: \"polygon\",\r\n      theme: \"dark\",\r\n      cacheProvider: true,\r\n      providerOptions \r\n      });\r\n  \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      export default function NFT3() {\r\n        const [apicall, getNfts] = useState([])\r\n        const [nftstk, getStk] = useState([])\r\n        const [loadingState, setLoadingState] = useState('not-loaded');\r\n        const [open,setOpen] = useState(false);\r\n        const [tokenID,setTokenID] = useState(0);\r\n        const [address,setAddress] = useState(\"\");\r\n      const handleClose = (value) => {\r\n        setOpen(false);\r\n      \r\n      };\r\n        useEffect(() => {\r\n          callApi()\r\n        }, [])\r\n        const transfer = (tokenID) => {\r\n      \r\n          setTokenID(tokenID);\r\n          setOpen(true);\r\n        }\r\n        const sendNFT = async() => {\r\n      \r\n          console.log(tokenID);\r\n          console.log(address);\r\n          var provider = await web3Modal.connect(window.ethereum);\r\n          web3 = new Web3(provider);\r\n          var accounts = await web3.eth.getAccounts();\r\n          account = accounts[0];\r\n          console.log(accounts);\r\n          const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n          let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n          const transactionParameters = {\r\n            to: NFTCONTRACT, // Required except during contract publications.\r\n            from: window.ethereum.selectedAddress, // must match user's active address.\r\n        //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n        //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n            maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n            maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n            gas: ethers.BigNumber.from(300000).toHexString(),\r\n            'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n        //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n        };\r\n        //sign transaction via Metamask\r\n        try {\r\n            const txHash = await window.ethereum.request({\r\n                    method: 'eth_sendTransaction',\r\n                    params: [transactionParameters],\r\n                });\r\n            // console.log(txHash);\r\n            return {\r\n                success: true,\r\n                status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                status: \"😥 Something went wrong: \" + error.message\r\n            }\r\n        }\r\n        }\r\n        \r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n            <div className='nftportal mb-4'>\r\n                <div className=\"container col-lg-11\">\r\n                  <div className=\"row items px-3 pt-3\">\r\n                    <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                      {apicall.map((nft, i) => {\r\n                        var owner = nft.wallet.toLowerCase();\r\n                          if (owner.indexOf(nft.holder) !== -1) {\r\n                        async function stakeit() {\r\n                          vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                        }\r\n                        return (\r\n                          <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                            <div className=\"image-over\">\r\n                              <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"card-caption col-12 p-0\">\r\n                              <div className=\"card-body\">\r\n                                <h5 className=\"mb-0\">POLAR-BEAR NFT #{nft.tokenId}</h5>\r\n                                <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                                <div className=\"card-bottom d-flex justify-content-between\">\r\n                                  <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Send</Button>\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        )}})}\r\n                        {nftstk.map((nft, i) => {\r\n                          async function unstakeit() {\r\n                            vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                          }\r\n                          return (\r\n                            <div>\r\n                            \r\n                            <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                              <div className=\"image-over\">\r\n                              <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                                <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                              </div>\r\n                              <div className=\"card-caption col-12 p-0\">\r\n                                <div className=\"card-body\">\r\n                                  <h5 className=\"mb-0\">POLAR-BEAR NFT #{nft.tokenId}</h5>\r\n                                  <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                                  <div className=\"card-bottom d-flex justify-content-between\">\r\n                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                    <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            </div>\r\n                          )})}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Dialog onClose={handleClose} open={open}>\r\n                <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>Transfer</Button>\r\n          \r\n        </Dialog>\r\n                </div>\r\n            )\r\n        }\r\n        ","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /* eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\n\r\nconst NFTCONTRACT = \"0x8Ca5Bc3D5afd5f2B579b83367f0C6f5Ea3b56060\";\r\nconst STAKINGCONTRACT = \"0x67b9f58417F767e9A6547b0C2b8eF019293c8389\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/QmRnL1CFq5PQb1v7tMMVRg5rymLPotbZRmrQLvPumzspVN/\";\r\n\r\n\r\n\r\n\r\nconst providerOptions = {\r\n  binancechainwallet: {\r\n    package: true\r\n    },\r\n\r\n    walletconnect: {\r\n      package: WalletConnectProvider,\r\n      options: {\r\n        infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n      }\r\n    },\r\n\r\n    walletlink: {\r\n      package: WalletLink, \r\n      options: {\r\n        appName: \"BULLSC VAULT\", \r\n        infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n        rpc: \"\", \r\n        chainId: 56, \r\n        appLogoUrl: null, \r\n        darkMode: true \r\n      }\r\n      },\r\n\r\n  };\r\n\r\n  const web3Modal = new Web3Modal({\r\n    network: \"mainnet\",// optional\r\n    theme: \"dark\",// optional\r\n    cacheProvider: true, // optional\r\n    providerOptions // required\r\n    });\r\n\r\n\r\n    \r\n\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function NFTB() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded');\r\n  const [open,setOpen] = useState(false);\r\n  const [tokenID,setTokenID] = useState(0);\r\n  const [address,setAddress] = useState(\"\");\r\nconst handleClose = (value) => {\r\n  setOpen(false);\r\n\r\n};\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n  const transfer = (tokenID) => {\r\n\r\n    setTokenID(tokenID);\r\n    setOpen(true);\r\n  }\r\n  const sendNFT = async() => {\r\n\r\n    console.log(tokenID);\r\n    console.log(address);\r\n    var provider = await web3Modal.connect(window.ethereum);\r\n    web3 = new Web3(provider);\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    console.log(accounts);\r\n    const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n    let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n    const transactionParameters = {\r\n      to: NFTCONTRACT, // Required except during contract publications.\r\n      from: window.ethereum.selectedAddress, // must match user's active address.\r\n  //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n  //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n      maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n      maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n      gas: ethers.BigNumber.from(300000).toHexString(),\r\n      'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n  //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n  };\r\n  //sign transaction via Metamask\r\n  try {\r\n      const txHash = await window.ethereum.request({\r\n              method: 'eth_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n      // console.log(txHash);\r\n      return {\r\n          success: true,\r\n          status: \"✅ Check out your transaction on bscscan: https://bscscan.com/tx/\" + txHash\r\n      }\r\n  } catch (error) {\r\n      return {\r\n          success: false,\r\n          status: \"😥 Something went wrong: \" + error.message\r\n      }\r\n  }\r\n  }\r\n  \r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=bsc&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h6 className=\"text-3xl\">Wallet Not Connected</h6>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n        <div className='nftportal mb-4'>\r\n            <div className=\"container col-lg-11\">\r\n              <div className=\"row items px-3 pt-3\">\r\n                <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                  {apicall.map((nft, i) => {\r\n                    var owner = nft.wallet.toLowerCase();\r\n                      if (owner.indexOf(nft.holder) !== -1) {\r\n                    async function stakeit() {\r\n                      vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                    }\r\n                    return (\r\n                      <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                        <div className=\"image-over\">\r\n                          <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"card-caption col-12 p-0\">\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"mb-0\">BULL NFT #{nft.tokenId}</h5>\r\n                            <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                            <div className=\"card-bottom d-flex justify-content-between\">\r\n                              <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Send</Button>\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}})}\r\n                    {nftstk.map((nft, i) => {\r\n                      async function unstakeit() {\r\n                        vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                      }\r\n                      return (\r\n                        <div>\r\n                        \r\n                        <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                          <div className=\"image-over\">\r\n                          <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                            <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                          </div>\r\n                          <div className=\"card-caption col-12 p-0\">\r\n                            <div className=\"card-body\">\r\n                              <h5 className=\"mb-0\">BULL NFT #{nft.tokenId}</h5>\r\n                              <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                              <div className=\"card-bottom d-flex justify-content-between\">\r\n                                <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      )})}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <Dialog onClose={handleClose} open={open}>\r\n            <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n            <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>Transfer</Button>\r\n      \r\n    </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n    ","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport NFTABI from './ABI.json';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport /* eslint-disable */ DialogTitle from '@mui/material/DialogTitle';\r\nimport Dialog from '@mui/material/Dialog';\r\n\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\n\r\n\r\nconst NFTCONTRACT = \"0x69D868A8f26054350CC0228de5FaCD8D95ecfB4C\";\r\nconst STAKINGCONTRACT = \"0x9738377aFe288cF2aD9673F18b0D5B2FdF989E46\";\r\nconst moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nconst moralisapikey = \"kDivwybEmEzIpTliB1KNyc9gEuE748bYd9qZeUiXVdQeUjpiGUoMWqAeHLchRH7k\";\r\nconst nftpng = \"https://dweb.link/ipfs/bafybeifhvl7sxpptpnshg5hxazz464nj44ibu7ex2xukrorusf4ysolosy/\";\r\n\r\n\r\n\r\n\r\nconst providerOptions = {\r\n    binancechainwallet: {\r\n      package: true\r\n      },\r\n  \r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\"\r\n        }\r\n      },\r\n  \r\n      walletlink: {\r\n        package: WalletLink, \r\n        options: {\r\n          appName: \"BULLSC-TIER1-VAULT\", \r\n          infuraId: \"f5364be202cb4bf0b151d9242e079fa5\",\r\n          rpc: \"\", \r\n          chainId: 137, \r\n          appLogoUrl: null, \r\n          darkMode: true \r\n        }\r\n        },\r\n  \r\n    };\r\n  \r\n    const web3Modal = new Web3Modal({\r\n      network: \"polygon\",\r\n      theme: \"dark\",\r\n      cacheProvider: true,\r\n      providerOptions \r\n      });\r\n  \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      export default function NFT5() {\r\n        const [apicall, getNfts] = useState([])\r\n        const [nftstk, getStk] = useState([])\r\n        const [loadingState, setLoadingState] = useState('not-loaded');\r\n        const [open,setOpen] = useState(false);\r\n        const [tokenID,setTokenID] = useState(0);\r\n        const [address,setAddress] = useState(\"\");\r\n      const handleClose = (value) => {\r\n        setOpen(false);\r\n      \r\n      };\r\n        useEffect(() => {\r\n          callApi()\r\n        }, [])\r\n        const transfer = (tokenID) => {\r\n      \r\n          setTokenID(tokenID);\r\n          setOpen(true);\r\n        }\r\n        const sendNFT = async() => {\r\n      \r\n          console.log(tokenID);\r\n          console.log(address);\r\n          var provider = await web3Modal.connect(window.ethereum);\r\n          web3 = new Web3(provider);\r\n          var accounts = await web3.eth.getAccounts();\r\n          account = accounts[0];\r\n          console.log(accounts);\r\n          const NFTcont= new web3.eth.Contract(NFTABI, NFTCONTRACT);\r\n          let x =await NFTcont.methods.transferFrom(account,address,tokenID);\r\n          const transactionParameters = {\r\n            to: NFTCONTRACT, // Required except during contract publications.\r\n            from: window.ethereum.selectedAddress, // must match user's active address.\r\n        //gasLimit: web3.utils.toHex(web3.utils.toWei('50','gwei')),  \r\n        //gasPrice: web3.utils.toHex(web3.utils.toWei('60','gwei')), \r\n            maxPriorityFeePerGas: web3.utils.toHex(web3.utils.toWei('31','gwei')),\r\n            maxFeePerGas: web3.utils.toHex(web3.utils.toWei('35','gwei')),\r\n            gas: ethers.BigNumber.from(300000).toHexString(),\r\n            'data': NFTcont.methods.transferFrom(account,address,tokenID).encodeABI() //make call to NFT smart contract \r\n        //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\r\n        };\r\n        //sign transaction via Metamask\r\n        try {\r\n            const txHash = await window.ethereum.request({\r\n                    method: 'eth_sendTransaction',\r\n                    params: [transactionParameters],\r\n                });\r\n            // console.log(txHash);\r\n            return {\r\n                success: true,\r\n                status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                status: \"😥 Something went wrong: \" + error.message\r\n            }\r\n        }\r\n        }\r\n        \r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `/nft/${NFTCONTRACT}/owners?chain=polygon&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n      }\r\n      return item\r\n    }))\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      console.log(apicall);\r\n      setLoadingState('loaded')\r\n    } \r\n    if (loadingState === 'loaded' && !apicall.length) \r\n    return (\r\n          <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n          return (\r\n            <div className='nftportal mb-4'>\r\n                <div className=\"container col-lg-11\">\r\n                  <div className=\"row items px-3 pt-3\">\r\n                    <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                      {apicall.map((nft, i) => {\r\n                        var owner = nft.wallet.toLowerCase();\r\n                          if (owner.indexOf(nft.holder) !== -1) {\r\n                        async function stakeit() {\r\n                          vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                        }\r\n                        return (\r\n                          <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                            <div className=\"image-over\">\r\n                              <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"card-caption col-12 p-0\">\r\n                              <div className=\"card-body\">\r\n                                <h5 className=\"mb-0\">NEFERTITI #{nft.tokenId}</h5>\r\n                                <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                                <div className=\"card-bottom d-flex justify-content-between\">\r\n                                  <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick= {() => transfer(nft.tokenId)}>Send</Button>\r\n                                  <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake</Button>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        )}})}\r\n                        {nftstk.map((nft, i) => {\r\n                          async function unstakeit() {\r\n                            vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                          }\r\n                          return (\r\n                            <div>\r\n                            \r\n                            <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                              <div className=\"image-over\">\r\n                              <img style={{position:'absolute',top:'0.02rem',width:'100px'}} src='stakeicon.png' alt=\"\"></img>\r\n                                <img className=\"card-img-top\" src={nftpng + nft.tokenId + '.png'} alt=\"\" />\r\n                              </div>\r\n                              <div className=\"card-caption col-12 p-0\">\r\n                                <div className=\"card-body\">\r\n                                  <h5 className=\"mb-0\">POLAR-BEAR NFT #{nft.tokenId}</h5>\r\n                                  <h5 className=\"mb-0 mt-2\"><p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                                  <div className=\"card-bottom d-flex justify-content-between\">\r\n                                    <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                    <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={unstakeit}>Unstake</Button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            </div>\r\n                          )})}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Dialog onClose={handleClose} open={open}>\r\n                <input  type=\"text\" value={address} onChange={(ev) => setAddress(ev.target.value)}/>\r\n                <Button style={{ marginLeft: '5px', backgroundColor: \"#15F4EE\" }} onClick={sendNFT}>Transfer</Button>\r\n          \r\n        </Dialog>\r\n                </div>\r\n            )\r\n        }\r\n        ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\nimport NFT1 from './nftbear';\nimport NFT2 from './nftyellow';\nimport NFT3 from './nftpolar';\nimport NFTB from './nftbull'\nimport NFT5 from './nftnfrt'\n\n\n<Routes>\n<Route path=\"/nftbull\" element={<NFTB />} />\n<Route path=\"/nft\" element={<Nft />} />\n<Route path=\"/nftbear\" element={<NFT1 />} />\n<Route path=\"/nftyellow\" element={<NFT2 />} />\n<Route path=\"/nftpolar\" element={<NFT3 />} />\n<Route path=\"/nftnfrt\" element={<NFT5 />} />\n\n</Routes>\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <Nft />\n    <NFT1 />\n    <NFT2 />\n    <NFT3 />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}